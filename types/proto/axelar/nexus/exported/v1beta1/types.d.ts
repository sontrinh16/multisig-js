import { KeyType } from "../../../tss/exported/v1beta1/types";
import { Coin } from "../../../../cosmos/base/v1beta1/coin";
import * as _m0 from "protobufjs/minimal";
import { DeepPartial, Long } from "@osmonauts/helpers";
export declare enum TransferState {
    TRANSFER_STATE_UNSPECIFIED = 0,
    TRANSFER_STATE_PENDING = 1,
    TRANSFER_STATE_ARCHIVED = 2,
    TRANSFER_STATE_INSUFFICIENT_AMOUNT = 3,
    UNRECOGNIZED = -1
}
export declare function transferStateFromJSON(object: any): TransferState;
export declare function transferStateToJSON(object: TransferState): string;
/** Chain represents the properties of a registered blockchain */
export interface Chain {
    name: string;
    supportsForeignAssets: boolean;
    keyType: KeyType;
    module: string;
}
/** CrossChainAddress represents a generalized address on any registered chain */
export interface CrossChainAddress {
    chain: Chain;
    address: string;
}
/**
 * CrossChainTransfer represents a generalized transfer of some asset to a
 * registered blockchain
 */
export interface CrossChainTransfer {
    recipient: CrossChainAddress;
    asset: Coin;
    id: Long;
    state: TransferState;
}
/** TransferFee represents accumulated fees generated by the network */
export interface TransferFee {
    coins: Coin[];
}
export interface FeeInfo {
    chain: string;
    asset: string;
    feeRate: Uint8Array;
    minFee: Uint8Array;
    maxFee: Uint8Array;
}
export interface Asset {
    denom: string;
    isNativeAsset: boolean;
}
export declare const Chain: {
    encode(message: Chain, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Chain;
    fromJSON(object: any): Chain;
    toJSON(message: Chain): unknown;
    fromPartial(object: DeepPartial<Chain>): Chain;
};
export declare const CrossChainAddress: {
    encode(message: CrossChainAddress, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CrossChainAddress;
    fromJSON(object: any): CrossChainAddress;
    toJSON(message: CrossChainAddress): unknown;
    fromPartial(object: DeepPartial<CrossChainAddress>): CrossChainAddress;
};
export declare const CrossChainTransfer: {
    encode(message: CrossChainTransfer, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CrossChainTransfer;
    fromJSON(object: any): CrossChainTransfer;
    toJSON(message: CrossChainTransfer): unknown;
    fromPartial(object: DeepPartial<CrossChainTransfer>): CrossChainTransfer;
};
export declare const TransferFee: {
    encode(message: TransferFee, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TransferFee;
    fromJSON(object: any): TransferFee;
    toJSON(message: TransferFee): unknown;
    fromPartial(object: DeepPartial<TransferFee>): TransferFee;
};
export declare const FeeInfo: {
    encode(message: FeeInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FeeInfo;
    fromJSON(object: any): FeeInfo;
    toJSON(message: FeeInfo): unknown;
    fromPartial(object: DeepPartial<FeeInfo>): FeeInfo;
};
export declare const Asset: {
    encode(message: Asset, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Asset;
    fromJSON(object: any): Asset;
    toJSON(message: Asset): unknown;
    fromPartial(object: DeepPartial<Asset>): Asset;
};
